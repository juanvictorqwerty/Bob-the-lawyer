name: Build Bob Application (Linux)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: "Bob"
  BUILD_NUMBER: 1
  BUILD_VERSION: "1.0.0"
  PYTHON_VERSION: "3.10.11"
  FLET_VERSION: "0.27.6"
  PYTHONUTF8: 1

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends ninja-build libgtk-3-dev patchelf
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Python dependencies (CPU-only, no CUDA)
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install flet==${{ env.FLET_VERSION }}
          
          # Force CPU-only PyTorch installation - explicitly avoid CUDA
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu --no-cache-dir
          
          # Install transformers and related packages
          pip install transformers tokenizers safetensors huggingface-hub accelerate --no-cache-dir
          
          # Install essential dependencies from requirements.txt, excluding torch variants
          pip install -r requirements.txt --no-cache-dir \
            --extra-index-url https://download.pytorch.org/whl/cpu
          
          # Verify CPU-only installation
          python -c "import torch; print(f'PyTorch version: {torch.__version__}, CUDA available: {torch.cuda.is_available()}, CPU only: {not torch.cuda.is_available()}')"
          
          # Clean up
          pip cache purge

      - name: Build application (optimized)
        working-directory: ./src
        run: |
          rm -rf build/
          flet build linux \
          --project "$APP_NAME" \
          --description "Bob The Lawyer Application" \
          --build-number $BUILD_NUMBER \
          --build-version $BUILD_VERSION \
          --source-packages tqdm transformers torch accelerate tokenizers safetensors huggingface-hub \
          --optimize \
          --no-rich-output \
          --verbose

      - name: Optimize build size
        working-directory: ./src
        run: |
          # Remove debugging symbols and unnecessary files
          find build/linux -name "*.pyc" -delete
          find build/linux -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find build/linux -name ".DS_Store" -delete 2>/dev/null || true
          find build/linux -name "*.pyo" -delete 2>/dev/null || true
          find build/linux -name "*.pyd" -delete 2>/dev/null || true
          
          # Remove test files and docs
          find build/linux -path "*/test*" -type d -exec rm -rf {} + 2>/dev/null || true
          find build/linux -path "*/tests*" -type d -exec rm -rf {} + 2>/dev/null || true
          find build/linux -name "*test*.py" -delete 2>/dev/null || true
          find build/linux -name "README*" -delete 2>/dev/null || true
          find build/linux -name "LICENSE*" -delete 2>/dev/null || true
          find build/linux -name "CHANGELOG*" -delete 2>/dev/null || true
          
          # Remove unused locale files
          find build/linux -path "*/locale/*" -name "*.mo" -delete 2>/dev/null || true
          
          # Remove large unnecessary files from torch
          find build/linux -path "*torch*" -name "*.so.*" -size +50M -delete 2>/dev/null || true
          find build/linux -path "*torch*" -name "libtorch_cuda*" -delete 2>/dev/null || true
          find build/linux -path "*torch*" -name "*cuda*" -delete 2>/dev/null || true
          
          # Strip binaries to remove debugging symbols
          find build/linux -name "*.so" -exec strip --strip-unneeded {} \; 2>/dev/null || true
          find build/linux -type f -executable -exec strip --strip-unneeded {} \; 2>/dev/null || true
          
          # Show size before compression
          du -sh build/linux
          
          # Create compressed archive with maximum compression
          cd build && tar -czf ../Bob-linux.tar.gz --exclude-backups --exclude-caches linux/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux
          path: src/Bob-linux.tar.gz
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install flet==${{ env.FLET_VERSION }}
          pip install torch --index-url https://download.pytorch.org/whl/cpu --no-cache-dir
          pip install -r requirements.txt --no-cache-dir
          python -c "import torch; print(f'PyTorch version: {torch.__version__}, CUDA: {torch.cuda.is_available()}')"
          pip cache purge

      - name: Build macOS Application
        working-directory: ./src
        run: |
          rm -rf build/
          flet build macos \
          --project "$APP_NAME" \
          --description "Bob The Lawyer Application" \
          --build-number $BUILD_NUMBER \
          --build-version $BUILD_VERSION \
          --source-packages tqdm transformers torch accelerate tokenizers safetensors huggingface-hub \
          --optimize \
          --verbose

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos
          path: