name: Build Bob Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: "Bob"
  BUILD_NUMBER: ${{ github.run_number }}
  BUILD_VERSION: "1.0.0"
  PYTHON_VERSION: "3.10.11"
  FLET_VERSION: "0.27.6"
  PYTHONUTF8: 1

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            ninja-build libgtk-3-dev patchelf libgl1 build-essential \
            libglib2.0-0 libsm6 libxrender1 libxext6
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Python dependencies
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install flet==${{ env.FLET_VERSION }} flet-cli==${{ env.FLET_VERSION }} flet-desktop==${{ env.FLET_VERSION }}
          pip install -r requirements.txt
          pip cache purge

      - name: Build application
        working-directory: ./src
        run: |
          rm -rf build/
          flet build linux \
            --project "${APP_NAME}"  \
            --build-number $BUILD_NUMBER \
            --build-version $BUILD_VERSION \
            --verbose

      - name: Prepare artifact
        working-directory: ./src
        run: |
          # Temporarily disable .pyc and __pycache__ cleanup to check if it affects the encodings issue.
          # If encodings are still missing, the problem likely lies in the 'flet build' step itself.
          # find build/linux -name "*.pyc" -delete
          # find build/linux -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          cd build && zip -qr ../${{ env.APP_NAME }}-linux.zip linux/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux
          path: src/Bob-linux.zip
          retention-days: 90

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install flet==${{ env.FLET_VERSION }} flet-cli==${{ env.FLET_VERSION }} flet-desktop==${{ env.FLET_VERSION }}
          pip install -r requirements.txt
          pip cache purge

      - name: Build macOS Application
        working-directory: ./src
        run: |
          rm -rf build/
          flet build macos \
            --project "${APP_NAME}"  \
            --build-number $BUILD_NUMBER \
            --build-version $BUILD_VERSION \
            --verbose

      - name: Prepare macOS artifact
        working-directory: ./src
        run: |
          # Optional: Clean .pyc files if Flet doesn't handle it fully for bundled apps
          # find "build/macos/${{ env.APP_NAME }}.app" -name "*.pyc" -delete
          # find "build/macos/${{ env.APP_NAME }}.app" -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          cd build && zip -qr ../${{ env.APP_NAME }}-macos.zip macos/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos
          # Upload the zipped artifact
          path: src/${{ env.APP_NAME }}-macos.zip
          retention-days: 90

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install flet==${{ env.FLET_VERSION }} flet-cli==${{ env.FLET_VERSION }} flet-desktop==${{ env.FLET_VERSION }}
          pip install -r requirements.txt
          pip cache purge

      - name: Build Windows Application
        working-directory: ./src
        run: |
          Remove-Item -Path build/ -Recurse -Force -ErrorAction SilentlyContinue
          flet build windows `
            --project "$env:APP_NAME" `
            --build-number $env:BUILD_NUMBER `
            --build-version $env:BUILD_VERSION `
            --verbose

      - name: Prepare Windows artifact
        working-directory: ./src
        shell: pwsh
        run: |
          # Optional: Clean .pyc files if Flet doesn't handle it fully
          # Get-ChildItem -Path "build/windows" -Recurse -Filter "*.pyc" | Remove-Item -Force -ErrorAction SilentlyContinue
          # Get-ChildItem -Path "build/windows" -Recurse -Filter "__pycache__" -Directory | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          Push-Location build
          Compress-Archive -Path windows -DestinationPath ../${{ env.APP_NAME }}-windows.zip -Force
          Pop-Location

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows
          path: src/${{ env.APP_NAME }}-windows.zip
          retention-days: 90